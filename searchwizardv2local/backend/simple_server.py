#!/usr/bin/env python3
"""
Simple HTTP server version that avoids FastAPI dependency conflicts
Uses only Python built-in modules for demonstration
"""

import http.server
import socketserver
import json
import os
import uuid
from datetime import datetime
from urllib.parse import urlparse, parse_qs
import cgi
import tempfile
from pathlib import Path

# Simple mock AI response for testing without API keys
def mock_ai_call(prompt_type):
    if "analyze" in prompt_type.lower():
        return json.dumps({
            "document_type": "Professional Document",
            "structure_analysis": "Well-structured document with clear sections",
            "style_notes": "Professional, formal tone with bullet points and clear headings",
            "template_prompt": "Create a professional document with: 1) Header section with title, 2) Executive summary, 3) Main content with bullet points, 4) Conclusion section. Use formal tone and clear formatting."
        })
    else:
        return """<!DOCTYPE html>
<html>
<head>
    <title>Generated Document</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        h1 { color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }
        h2 { color: #34495e; margin-top: 30px; }
        ul { margin: 15px 0; }
        li { margin: 5px 0; }
        .summary { background: #f8f9fa; padding: 15px; border-left: 4px solid #3498db; margin: 20px 0; }
    </style>
</head>
<body>
    <h1>Generated Document</h1>
    
    <div class="summary">
        <h2>Executive Summary</h2>
        <p>This document was generated using the template structure and incorporates the user requirements provided.</p>
    </div>
    
    <h2>Main Content</h2>
    <p>Key points from your requirements:</p>
    <ul>
        <li>Following the template structure</li>
        <li>Professional formatting applied</li>
        <li>Content generated based on specifications</li>
        <li>Ready for further customization</li>
    </ul>
    
    <h2>Conclusion</h2>
    <p>This demonstrates the simplified document generation workflow. In the full version, this would be generated by AI using your specific requirements.</p>
    
    <p><em>Note: This is a demo version. The full system would use AI to generate content based on your template and requirements.</em></p>
</body>
</html>"""

class SimpleDocGenHandler(http.server.SimpleHTTPRequestHandler):
    def do_OPTIONS(self):
        # Handle CORS preflight
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

    def do_GET(self):
        if self.path == '/':
            self.send_json_response({"status": "ok", "message": "SearchWizard V2 Simple Server"})
        elif self.path == '/templates':
            templates = self.load_templates()
            self.send_json_response({"templates": templates})
        elif self.path.startswith('/documents/'):
            doc_id = self.path.split('/')[-1]
            documents = self.load_documents()
            doc = next((d for d in documents if d["id"] == doc_id), None)
            if doc:
                self.send_json_response(doc)
            else:
                self.send_error(404, "Document not found")
        elif self.path == '/documents':
            documents = self.load_documents()
            summary = [
                {
                    "id": doc["id"],
                    "template_name": doc.get("template_name", "Unknown"),
                    "requirements": doc["requirements"][:100] + "..." if len(doc["requirements"]) > 100 else doc["requirements"],
                    "created_at": doc["created_at"]
                }
                for doc in documents
            ]
            self.send_json_response({"documents": summary})
        else:
            self.send_error(404, "Not found")

    def do_POST(self):
        if self.path == '/templates':
            self.handle_create_template()
        elif self.path == '/generate':
            self.handle_generate_document()
        else:
            self.send_error(404, "Not found")

    def handle_create_template(self):
        try:
            # Parse multipart form data
            content_type = self.headers.get('Content-Type', '')
            if 'multipart/form-data' in content_type:
                # Simple file upload handling
                content_length = int(self.headers.get('Content-Length', 0))
                post_data = self.rfile.read(content_length)
                
                # For demo purposes, create a mock template
                template = {
                    "id": str(uuid.uuid4()),
                    "name": "Demo Template",
                    "filename": "uploaded_file.pdf",
                    "document_type": "Professional Document",
                    "original_content": "Demo content extracted from uploaded file",
                    "structure_analysis": "Professional document structure identified",
                    "style_notes": "Formal business style",
                    "template_prompt": mock_ai_call("analyze"),
                    "created_at": datetime.now().isoformat(),
                    "usage_count": 0
                }
                
                # Save template
                templates = self.load_templates()
                templates.append(template)
                self.save_templates(templates)
                
                self.send_json_response({
                    "template_id": template["id"],
                    "name": template["name"],
                    "document_type": template["document_type"],
                    "message": "Template created successfully (demo mode)"
                })
            else:
                self.send_error(400, "Invalid content type")
        except Exception as e:
            self.send_error(500, f"Template creation failed: {str(e)}")

    def handle_generate_document(self):
        try:
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            request_data = json.loads(post_data.decode('utf-8'))
            
            template_id = request_data.get('template_id')
            requirements = request_data.get('requirements')
            
            # Load template
            templates = self.load_templates()
            template = next((t for t in templates if t["id"] == template_id), None)
            
            if not template:
                self.send_error(404, "Template not found")
                return
            
            # Generate document (mock for demo)
            generated_content = mock_ai_call("generate")
            
            # Create document record
            document = {
                "id": str(uuid.uuid4()),
                "template_id": template_id,
                "template_name": template["name"],
                "requirements": requirements,
                "generated_content": generated_content,
                "created_at": datetime.now().isoformat()
            }
            
            # Save document
            documents = self.load_documents()
            documents.append(document)
            self.save_documents(documents)
            
            # Update template usage
            for t in templates:
                if t["id"] == template_id:
                    t["usage_count"] = t.get("usage_count", 0) + 1
                    break
            self.save_templates(templates)
            
            self.send_json_response({
                "document_id": document["id"],
                "content": generated_content,
                "message": "Document generated successfully (demo mode)"
            })
            
        except Exception as e:
            self.send_error(500, f"Document generation failed: {str(e)}")

    def send_json_response(self, data):
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()
        self.wfile.write(json.dumps(data, indent=2).encode())

    def load_templates(self):
        data_dir = Path("../data")
        data_dir.mkdir(exist_ok=True)
        templates_file = data_dir / "templates.json"
        if templates_file.exists():
            with open(templates_file, 'r') as f:
                return json.load(f)
        return []

    def save_templates(self, templates):
        data_dir = Path("../data")
        data_dir.mkdir(exist_ok=True)
        templates_file = data_dir / "templates.json"
        with open(templates_file, 'w') as f:
            json.dump(templates, f, indent=2)

    def load_documents(self):
        data_dir = Path("../data")
        data_dir.mkdir(exist_ok=True)
        documents_file = data_dir / "documents.json"
        if documents_file.exists():
            with open(documents_file, 'r') as f:
                return json.load(f)
        return []

    def save_documents(self, documents):
        data_dir = Path("../data")
        data_dir.mkdir(exist_ok=True)
        documents_file = data_dir / "documents.json"
        with open(documents_file, 'w') as f:
            json.dump(documents, f, indent=2)

if __name__ == "__main__":
    PORT = 8000
    print(f"Starting SearchWizard V2 Simple Server on port {PORT}")
    print("This version uses only Python built-in modules (no dependency conflicts)")
    print(f"API available at: http://localhost:{PORT}")
    print("Frontend should be served from: http://localhost:8080")
    print("\nNote: This is demo mode with mock AI responses")
    print("To use real AI, run the main.py version after fixing dependencies")
    
    with socketserver.TCPServer(("", PORT), SimpleDocGenHandler) as httpd:
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\nServer stopped")
            httpd.shutdown()